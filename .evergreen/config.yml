########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 6 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"
           export PROJECT_DIRECTORY="$(pwd)"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
              export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export DRIVERS_TOOLS="$DRIVERS_TOOLS"
              export MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
              export MONGODB_BINARIES="$MONGODB_BINARIES"
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"

              export TMPDIR="$MONGO_ORCHESTRATION_HOME/db"
              export PATH="$MONGODB_BINARIES:$PATH"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ $DRIVERS_TOOLS
          else
            git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git $DRIVERS_TOOLS
          fi
          echo "{ \"releases\": { \"default\": \"$MONGODB_BINARIES\" }}" > $MONGO_ORCHESTRATION_HOME/orchestration.config

  "upload release":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${project}.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${project}-${CURRENT_VERSION}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  "upload build":
    # Compress and upload the entire build directory
    - command: archive.targz_pack
      params:
        # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        target: "${build_id}.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${build_id}.tar.gz
        # Example: /mciuploads/${UPLOAD_BUCKET}/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  "fetch build":
    - command: shell.exec
      params:
        continue_on_err: true
        script: "set -o xtrace && rm -rf ${PROJECT_DIRECTORY}"
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${BUILD_NAME}/${build_id}.tar.gz
        bucket: mciuploads
        local_file: build.tar.gz
    - command: shell.exec
      params:
        continue_on_err: true
        # EVG-1105: Use s3.get extract_to: ./
        script: "set -o xtrace && cd .. && rm -rf ${PROJECT_DIRECTORY} && mkdir ${PROJECT_DIRECTORY}/ && tar xf build.tar.gz -C ${PROJECT_DIRECTORY}/"

  "exec compile script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          [ -f ${PROJECT_DIRECTORY}/${file} ] && BUILDTOOL="${buildtool}" sh ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          [ -f ${PROJECT_DIRECTORY}/${file} ] && sh ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "upload docs" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/doc/html s3://mciuploads/${UPLOAD_BUCKET}/docs/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/doc/html/index.html
        remote_file: ${UPLOAD_BUCKET}/docs/${CURRENT_VERSION}/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Rendered docs"

  "upload coverage" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/coverage s3://mciuploads/${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/coverage/index.html
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report"

  "upload scan artifacts" :
    - command: shell.exec
      type: test
      params:
        script: |
          cd
          if find ${PROJECT_DIRECTORY}/scan -name \*.html | grep -q html; then
            (cd ${PROJECT_DIRECTORY}/scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
          else
            echo "No issues found" > scan.html
          fi
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/scan s3://mciuploads/${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/scan.html
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Scan Build Report"

  "upload mo artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find $MONGO_ORCHESTRATION_HOME -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${DRIVERS_TOOLS}/.evergreen/orchestration/server.log
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
        exclude_files:
          # Windows cannot read the mongod *.lock files because they are locked.
          - "*.lock"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results":
    - command: attach.results
      params:
        file_location: "${PROJECT_DIRECTORY}/test-results.json"
    - command: attach.results
      params:
        file_location: "${DRIVERS_TOOLS}/results.json"

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} STORAGE_ENGINE=${STORAGE_ENGINE} sh ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "stop mongo-orchestration":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          sh ${DRIVERS_TOOLS}/.evergreen/stop-orchestration.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          AUTH=${AUTH} SSL=${SSL} MONGODB_URI="${MONGODB_URI}" sh ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh

  "cleanup":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          rm -rf $DRIVERS_TOOLS || true

  "fix absolute paths":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for filename in $(find ${DRIVERS_TOOLS} -name \*.json); do
            perl -p -i -e "s|ABSOLUTE_PATH_REPLACEMENT_TOKEN|${DRIVERS_TOOLS}|g" $filename
          done

  "windows fix":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done
          # Copy client certificate because symlinks do not work on Windows.
          cp ${DRIVERS_TOOLS}/.evergreen/x509gen/client.pem ${MONGO_ORCHESTRATION_HOME}/lib/client.pem

  "make files executable":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          for i in $(find ${DRIVERS_TOOLS}/.evergreen ${PROJECT_DIRECTORY}/.evergreen -name \*.sh); do
            chmod +x $i
          done

  "init test-results":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          echo '{"results": [{ "status": "FAIL", "test_file": "Build", "log_raw": "No test-results.json found was created"  } ]}' > ${PROJECT_DIRECTORY}/test-results.json

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          file="${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh"
          # Don't use ${file} syntax here because evergreen treats it as an empty expansion.
          [ -f "$file" ] && sh $file || echo "$file not available, skipping"

pre:
  - func: "fetch source"
  - func: "prepare resources"
  - func: "windows fix"
  - func: "fix absolute paths"
  - func: "init test-results"
  - func: "make files executable"
  - func: "install dependencies"

post:
  # Skip: uploading the full working directory is not needed by drivers-evergreen-tools.
  # - func: "upload working dir"
  - func: "upload mo artifacts"
  - func: "upload test results"
  - func: "stop mongo-orchestration"
  - func: "cleanup"

tasks:


    # Wildcard task. Do you need to find out what tools are available and where?
    # Throw it here, and execute this task on all buildvariants
    - name: getdata
      commands:
        - command: shell.exec
          type: test
          params:
            script: |
               set -o xtrace
               . ${DRIVERS_TOOLS}/.evergreen/download-mongodb.sh || true
               get_distro || true
               echo $DISTRO
               echo $MARCH
               echo $OS
               uname -a || true
               ls /etc/*release* || true
               cc --version || true
               gcc --version || true
               clang --version || true
               gcov --version || true
               lcov --version || true
               llvm-cov --version || true
               echo $PATH
               ls -la /usr/local/Cellar/llvm/*/bin/ || true
               ls -la /usr/local/Cellar/ || true
               scan-build --version || true
               genhtml --version || true
               valgrind --version || true

# Release Engineering Matrix {{{
    - name: make-release-archive
      tags: ["releng"]
      commands:
        - func: "exec script"
          vars:
            file: ".evergreen/make-release.sh"
        - func: "upload release"
        - func: "upload build"

    - name: make-docs
      tags: ["releng"]
      commands:
        - func: "exec script"
          vars:
            file: ".evergreen/make-docs.sh"
        - func: "upload docs"

    - name: release-compile
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        # Fetch the make-release-archive generated archive, rather then the git clone
        - func: "fetch build"
        - func: "exec script"
          vars:
            file: ".evergreen/compile.sh"
        - func: "upload build"

    - name: release-compile-cmake
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        # Fetch the make-release-archive generated archive, rather then the git clone
        - func: "fetch build"
        - func: "exec compile script"
          vars:
            file: ".evergreen/compile.sh"
            buildtool: "cmake"
        - func: "upload build"
# }}}


# Standard test tasks {{{

    - name: "test-2.4-standalone"
      tags: ["2.4", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-2.4-replica_set"
      tags: ["2.4", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-2.4-sharded_cluster"
      tags: ["2.4", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-2.6-standalone"
      tags: ["2.6", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-2.6-replica_set"
      tags: ["2.6", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-2.6-sharded_cluster"
      tags: ["2.6", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.0-standalone"
      tags: ["3.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.0-replica_set"
      tags: ["3.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.0-sharded_cluster"
      tags: ["3.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.2-standalone"
      tags: ["3.2", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.2-replica_set"
      tags: ["3.2", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.2-sharded_cluster"
      tags: ["3.2", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.4-standalone"
      tags: ["3.4", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.4-replica_set"
      tags: ["3.4", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.4-sharded_cluster"
      tags: ["3.4", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"
    - name: "test-3.6-standalone"
      tags: ["3.6", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.6-replica_set"
      tags: ["3.6", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.6-sharded_cluster"
      tags: ["3.6", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-standalone"
      tags: ["latest", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-latest-replica_set"
      tags: ["latest", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-latest-sharded_cluster"
      tags: ["latest", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

# }}}


axes:
  - id: versions
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
      - id: "3.6"
        display_name: "3.6"
        variables:
           VERSION: "3.6"
      - id: "3.4"
        display_name: "3.4"
        variables:
           VERSION: "3.4"
      - id: "3.2"
        display_name: "3.2"
        variables:
           VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
           VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
           VERSION: "2.6"
      - id: "2.4"
        display_name: "2.4"
        variables:
           VERSION: "2.4"


  # OSes that support versions of MongoDB>=2.4 with SSL.
  - id: os-fully-featured
    display_name: OS
    values:

      - id: amazon1-2018-test
        display_name: "Amazon Linux 2018 (Enterprise)"
        run_on: amazon1-2018-test

  # OSes that support versions of MongoDB without SSL.
  - id: os-nossl
    display_name: OS
    values:
      - id: archlinux-test
        display_name: "Archlinux"
        run_on: archlinux-test

      - id: macos-1012
        display_name: "macOS 10.12"
        run_on: macos-1012

  - id: os-windows
    display_name: OS
    values:
      - id: windows-64-vs2010-test
        display_name: "Windows (VS2010)"
        run_on: windows-64-vs2010-test

      - id: windows-64-vs2013-test
        display_name: "Windows (VS2013)"
        run_on: windows-64-vs2013-test

      - id: windows-64-vs2015-test
        display_name: "Windows (VS2015)"
        run_on: windows-64-vs2015-test

  # OSes that support versions of MongoDB>=2.6 with SSL.
  - id: os-requires-26
    display_name: OS
    values:
      - id: ubuntu-14.04
        display_name: "Ubuntu 14.04"
        run_on: ubuntu1404-test

      - id: rhel70
        display_name: "RHEL 7.0"
        run_on: rhel70-small

      - id: debian71-test
        display_name: "Debian 7.1"
        run_on: debian71-test

  # OSes that support versions of MongoDB>=3.2 with SSL.
  - id: os-requires-32
    display_name: OS
    values:
      - id: suse12-x86-64-test
        display_name: "SUSE 12 (x86_64)"
        run_on: suse12-test

      - id: ubuntu-16.04
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test

      - id: rhel71-power8-test
        display_name: "RHEL 7.1 (POWER8)"
        run_on: rhel71-power8-test

  # OSes that introduced support for SSL with MongoDB>=3.2.
  - id: os-ssl-requires-32
    display_name: OS
    values:
      - id: macos-1012
        display_name: "macOS 10.12"
        run_on: macos-1012

  # OSes that support versions of MongoDB>=3.4 with SSL.
  - id: os-requires-34
    display_name: OS
    values:
      - id: debian81-test
        display_name: "Debian 8.1"
        run_on: debian81-test

      - id: rhel72-zseries-test
        display_name: "RHEL 7.2 (zSeries)"
        run_on: rhel72-zseries-test

      - id: suse12-zseries-test
        display_name: "SUSE 12 (zSeries)"
        run_on: suse12-zseries-test

      - id: ubuntu1604-arm64-small
        display_name: "Ubuntu 16.04 (ARM64)"
        run_on: ubuntu1604-arm64-small

      - id: ubuntu1604-power8-test
        display_name: "Ubuntu 16.04 (POWER8)"
        run_on: ubuntu1604-power8-test

      - id: ubuntu1604-zseries-small
        display_name: "Ubuntu 16.04 (zSeries)"
        run_on: ubuntu1604-zseries-small

  # OSes that support versions of MongoDB>=4.0 with SSL.
  - id: os-requires-40
    display_name: OS
    values:
      - id: debian92-test
        display_name: "Debian 9.2"
        run_on: debian92-test

  - id: topology
    display_name: Topology
    values:
      - id: standalone
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: replicaset
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: sharded-cluster
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: auth
    display_name: Authentication
    values:
      - id: auth
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: noauth
        display_name: NoAuth
        variables:
           AUTH: "noauth"
  - id: ssl
    display_name: SSL
    values:
      - id: ssl
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: nossl
        display_name: NoSSL
        variables:
           SSL: "nossl"
  - id: storage-engine
    display_name: Storage
    values:
      - id: mmapv1
        display_name: MMAPv1
        variables:
           STORAGE_ENGINE: "mmapv1"
      - id: wiredtiger
        display_name: WiredTiger
        variables:
           STORAGE_ENGINE: "wiredtiger"
      - id: inmemory
        display_name: InMemory
        variables:
           STORAGE_ENGINE: "inmemory"


buildvariants:

# Test packaging and other release related routines
- name: releng-release-archive-creator
  display_name: "** Release Archive Creator"
  run_on:
    - ubuntu1404-build
  tasks:
    - ".releng" # Run all tasks with the "releng" tag


- matrix_name: "tests-all"
  matrix_spec: {"os-fully-featured": "*", auth: "*", ssl: "*" }
  display_name: "${os-fully-featured} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"
     - name: "test-3.0-replica_set"
     - name: "test-3.0-sharded_cluster"
     - name: "test-3.0-standalone"
     - name: "test-2.6-replica_set"
     - name: "test-2.6-sharded_cluster"
     - name: "test-2.6-standalone"
     - name: "test-2.4-replica_set"
     - name: "test-2.4-sharded_cluster"
     - name: "test-2.4-standalone"

- matrix_name: "tests-nossl"
  matrix_spec: {"os-nossl": "*", auth: "*", ssl: "nossl" }
  display_name: "${os-nossl} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"
     - name: "test-3.0-replica_set"
     - name: "test-3.0-sharded_cluster"
     - name: "test-3.0-standalone"
     - name: "test-2.6-replica_set"
     - name: "test-2.6-sharded_cluster"
     - name: "test-2.6-standalone"
     - name: "test-2.4-replica_set"
     - name: "test-2.4-sharded_cluster"
     - name: "test-2.4-standalone"

- matrix_name: "tests-os-requires-26"
  matrix_spec: {"os-requires-26": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-26} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"
     - name: "test-3.0-replica_set"
     - name: "test-3.0-sharded_cluster"
     - name: "test-3.0-standalone"
     - name: "test-2.6-replica_set"
     - name: "test-2.6-sharded_cluster"
     - name: "test-2.6-standalone"

- matrix_name: "tests-os-requires-32"
  matrix_spec: {"os-requires-32": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-32} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"

- matrix_name: "tests-ssl-requires-32"
  matrix_spec: {"os-ssl-requires-32": "*", auth: "*", ssl: "ssl" }
  display_name: "${os-ssl-requires-32} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"

- matrix_name: "tests-os-requires-34"
  matrix_spec: {"os-requires-34": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-34} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"

- matrix_name: "tests-os-requires-40"
  matrix_spec: {"os-requires-40": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-40} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"

# Storage Engine Tests on Amazon Linux (Enterprise)
- matrix_name: "tests-storage-engines"
  matrix_spec: {"os-fully-featured": "amazon1-2018-test", storage-engine: "*" }
  display_name: "${os-fully-featured} ${storage-engine}"
  rules:
    - if:
        os-fully-featured: "*"
        storage-engine: ["mmapv1"]
      then:
        add_tasks:
          - "test-3.6-standalone"
          - "test-3.4-standalone"
          - "test-3.2-standalone"
    - if:
        os-fully-featured: "*"
        storage-engine: ["inmemory"]
      then:
        add_tasks:
          - "test-latest-standalone"
          - "test-3.6-standalone"
          - "test-3.4-standalone"
          - "test-3.2-standalone"
    - if:
        os-fully-featured: "*"
        storage-engine: "wiredtiger"
      then:
        add_tasks:
          - "test-3.0-standalone"

- matrix_name: "tests-windows"
  matrix_spec: {os-windows: "*", auth: "*", ssl: "*" }
  display_name: "${os-windows} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"
     - name: "test-3.4-replica_set"
     - name: "test-3.4-sharded_cluster"
     - name: "test-3.4-standalone"
     - name: "test-3.2-replica_set"
     - name: "test-3.2-sharded_cluster"
     - name: "test-3.2-standalone"
     - name: "test-3.0-replica_set"
     - name: "test-3.0-sharded_cluster"
     - name: "test-3.0-standalone"
     - name: "test-2.6-replica_set"
     - name: "test-2.6-sharded_cluster"
     - name: "test-2.6-standalone"
  rules:
     # Windows MongoDB 2.4 does not support SSL.
     - if:
         os-windows: "*"
         auth: "*"
         ssl: "nossl"
       then:
         add_tasks:
           - name: "test-2.4-replica_set"
           - name: "test-2.4-sharded_cluster"
           - name: "test-2.4-standalone"

      # Platform notes
      # i386 builds of OpenSSL or Cyrus SASL are not available
      # Ubuntu14.04 only supports 2.6+ with SSL
      # Ubuntu16.04 ppc64le is only supported by MongoDB 3.4+
      # Ubuntu16.04 aarch64 is only supported by MongoDB 3.4+
      # Ubuntu16.04 s390x is only supported by MongoDB 3.4+
      # Ubuntu16.04 (x86) only supports MongoDB 3.2+
      # Debian 8.1 only supports MongoDB 3.4+
      # SUSE12 s390x is only supported by MongoDB 3.4+
      # No enterprise build for Archlinux, SSL not available
      # RHEL 7 only supports 2.6+
      # RHEL 7.1 ppc64le is only supported by MongoDB 3.2+
      # RHEL 7.2 s390x is only supported by MongoDB 3.4+
      # Solaris MongoDB SSL builds are not available
      # Darwin MongoDB SSL builds are not available for 2.4 and 2.6
      # Windows does not support MongoDB 2.4 with SSL
      # Debian 7.1 does not support MongoDB 2.4
      # SUSE12 x86_64 is only supported by MongoDB 3.2+
      # vim: set et sw=2 ts=2 :

