########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 6 minutes is the longest we'll ever run

# Ensure that setup and teardown is working as expected.
pre_error_fails_task: true
pre_timeout_secs: 1800 # 5 minutes
post_error_fails_task: true
post_timeout_secs: 1800 # 5 minutes

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        shell: bash
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export DRIVERS_TOOLS="$(pwd)/../drivers-tools"
           export PROJECT_DIRECTORY="$(pwd)"

           # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
           if [[ "$(uname -s)" == CYGWIN* ]]; then
              export DRIVERS_TOOLS=$(cygpath -m $DRIVERS_TOOLS)
              export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
           fi

           export MONGO_ORCHESTRATION_HOME="$DRIVERS_TOOLS/.evergreen/orchestration"
           export PROJECT_ORCHESTRATION_HOME="$PROJECT_DIRECTORY/.evergreen/orchestration"
           export MONGODB_BINARIES="$DRIVERS_TOOLS/mongodb/bin"
           export UPLOAD_BUCKET="${project}"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           DRIVERS_TOOLS: "$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME: "$MONGO_ORCHESTRATION_HOME"
           PROJECT_ORCHESTRATION_HOME: "$PROJECT_ORCHESTRATION_HOME"
           MONGODB_BINARIES: "$MONGODB_BINARIES"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           EOT

           cat <<EOT > .env
           CURRENT_VERSION="$CURRENT_VERSION"
           DRIVERS_TOOLS="$DRIVERS_TOOLS"
           MONGO_ORCHESTRATION_HOME="$MONGO_ORCHESTRATION_HOME"
           PROJECT_ORCHESTRATION_HOME="$PROJECT_ORCHESTRATION_HOME"
           MONGODB_BINARIES="$MONGODB_BINARIES"
           UPLOAD_BUCKET="$UPLOAD_BUCKET"
           PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
           EOT

           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "prepare resources":
    - command: shell.exec
      params:
        script: |
          rm -rf ${DRIVERS_TOOLS}
          if [ "${project}" = "drivers-tools" ]; then
            # If this was a patch build, doing a fresh clone would not actually test the patch
            cp -R ${PROJECT_DIRECTORY}/ ${DRIVERS_TOOLS}
          else
            git clone https://github.com/mongodb-labs/drivers-evergreen-tools.git ${DRIVERS_TOOLS}
          fi
          ${DRIVERS_TOOLS}/.evergreen/setup.sh

  "upload release":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${project}.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${project}-${CURRENT_VERSION}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  "upload build":
    # Compress and upload the entire build directory
    - command: archive.targz_pack
      params:
        # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        target: "${build_id}.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${build_id}.tar.gz
        # Example: /mciuploads/${UPLOAD_BUCKET}/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${branch_name}/${task_name}/build.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  "fetch build":
    - command: shell.exec
      params:
        continue_on_err: true
        script: "rm -rf ${PROJECT_DIRECTORY}"
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${branch_name}/${BUILD_NAME}/build.tar.gz
        bucket: mciuploads
        extract_to: ${PROJECT_DIRECTORY}

  "exec compile script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          [ -f ${PROJECT_DIRECTORY}/${file} ] && BUILDTOOL="${buildtool}" bash ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "exec script" :
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          [ -f ${PROJECT_DIRECTORY}/${file} ] && bash ${PROJECT_DIRECTORY}/${file} || echo "${PROJECT_DIRECTORY}/${file} not available, skipping"

  "upload docs" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/doc/html s3://mciuploads/${UPLOAD_BUCKET}/docs/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/doc/html/index.html
        remote_file: ${UPLOAD_BUCKET}/docs/${CURRENT_VERSION}/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Rendered docs"

  "upload coverage" :
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/coverage s3://mciuploads/${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/coverage/index.html
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report"

  "upload scan artifacts" :
    - command: shell.exec
      type: test
      params:
        script: |
          cd
          if find ${PROJECT_DIRECTORY}/scan -name \*.html | grep -q html; then
            (cd ${PROJECT_DIRECTORY}/scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
          else
            echo "No issues found" > scan.html
          fi
    - command: shell.exec
      params:
        silent: true
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp ${PROJECT_DIRECTORY}/scan s3://mciuploads/${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  ${PROJECT_DIRECTORY}/scan.html
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Scan Build Report"

  "upload logs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${DRIVERS_TOOLS}/.evergreen/test_logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "test_logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        optional: true
        local_file: ${DRIVERS_TOOLS}/.evergreen/orchestration/server.log
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: ${PROJECT_DIRECTORY}/
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"
    - command: archive.targz_pack
      params:
        target: "drivers-dir.tar.gz"
        source_dir: ${DRIVERS_TOOLS}
        include:
          - "./**"
        exclude_files:
          # Windows cannot read the mongod *.lock files because they are locked.
          - "*.lock"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: drivers-dir.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-drivers-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-dir.tar.gz"

  "upload test results":
    - command: attach.results
      params:
        file_location: "${PROJECT_DIRECTORY}/test-results.json"
    - command: attach.results
      params:
        optional: true
        file_location: "${DRIVERS_TOOLS}/results.json"

  "bootstrap mongo-orchestration":
    - command: subprocess.exec
      params:
        # Purposely use sh here to ensure backwards compatibility.
        binary: sh
        env:
          MONGODB_VERSION: ${VERSION}
          TOPOLOGY: ${TOPOLOGY}
          SSL: ${SSL}
          STORAGE_ENGINE: ${STORAGE_ENGINE}
          LOAD_BALANCER: ${LOAD_BALANCER}
          REQUIRE_API_VERSION: ${REQUIRE_API_VERSION}
        args:
          - ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    # run-orchestration generates expansion file with the MONGODB_URI for the cluster
    - command: expansions.update
      params:
        file: mo-expansion.yml

  "start load balancer":
    - command: subprocess.exec
      params:
        binary: bash
        env:
          MONGODB_URI: ${MONGODB_URI}
        args:
          - ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh
          - start
    - command: expansions.update
      params:
        file: lb-expansion.yml

  "run tests":
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        working_dir: "src"
        env:
          AUTH: ${AUTH}
          SSL: ${SSL}
          MONGODB_URI: ${MONGODB_URI}
          CRYPT_SHARED_LIB_PATH: ${CRYPT_SHARED_LIB_PATH}
        args:
          - ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh

  "run docker test":
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        env:
          ENTRYPOINT: /root/test-entrypoint.sh
        args:
          - ${DRIVERS_TOOLS}/.evergreen/docker/run-server.sh
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: "src"
        script: |
          # Generate a test results file
          make test

  "run oidc local test":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: shell.exec
      type: test
      params:
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        working_dir: "src"
        script: |
          set -ex
          bash ${DRIVERS_TOOLS}/.evergreen/auth_oidc/setup.sh
          test -f /tmp/tokens/test_user1
          test -f /tmp/tokens/test_user2
          test -f /tmp/tokens/test_machine
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc docker test":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: shell.exec
      type: test
      params:
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        working_dir: "src"
        script: |
          set -ex
          cd ${DRIVERS_TOOLS}/.evergreen/auth_oidc
          ENTRYPOINT=/root/docker_entry_base.sh bash start_local_server.sh
          test -f /tmp/tokens/test_user1
          test -f /tmp/tokens/test_user2
          test -f /tmp/tokens/test_machine
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc azure test":
    - command: shell.exec
      type: test
      params:
        shell: bash
        script: |-
          set -o errexit
          cd ${DRIVERS_TOOLS}
          export AZUREOIDC_DRIVERS_TAR_FILE=/tmp/drivers-tools.tgz
          git archive -o $AZUREOIDC_DRIVERS_TAR_FILE HEAD
          export AZUREOIDC_TEST_CMD="source ./env.sh && echo 'hello'"
          bash ./.evergreen/auth_oidc/azure/run-driver-test.sh
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc azure func test":
    - command: shell.exec
      type: test
      params:
        shell: bash
        script: |-
          set -o errexit
          cd ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure_func/self-test
          export FUNC_NAME=oidcselftest
          source ../secrets-export.sh
          export FUNC_APP_NAME=$AZUREOIDC_FUNC_SELF_TEST
          export FUNC_RUNTIME=python
          bash ../run-driver-test.sh
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc gcp test":
    - command: shell.exec
      type: test
      params:
        shell: bash
        script: |-
          set -o errexit
          cd ${DRIVERS_TOOLS}
          export GCPOIDC_DRIVERS_TAR_FILE=/tmp/drivers-tools.tgz
          git archive -o $GCPOIDC_DRIVERS_TAR_FILE HEAD
          export GCPOIDC_TEST_CMD="source ./secrets-export.sh && echo 'hello'"
          bash ./.evergreen/auth_oidc/gcp/run-driver-test.sh
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc k8s atlas test":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: shell.exec
      type: test
      params:
        shell: bash
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |-
          set -o errexit
          cd ${DRIVERS_TOOLS}
          export K8S_VARIANT=${VARIANT}
          bash ./.evergreen/auth_oidc/k8s/setup-pod.sh
          bash ./.evergreen/auth_oidc/k8s/run-self-test.sh
          export K8S_DRIVERS_TAR_FILE=/tmp/drivers-tools.tgz
          git archive -o $K8S_DRIVERS_TAR_FILE HEAD
          export K8S_TEST_CMD="echo 'hello'"
          bash ./.evergreen/auth_oidc/k8s/run-driver-test.sh
          bash ./.evergreen/auth_oidc/k8s/teardown-pod.sh
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "run oidc k8s local test":
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: shell.exec
      type: test
      params:
        shell: bash
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |-
          set -o errexit
          cd ${DRIVERS_TOOLS}
          export K8S_VARIANT=${VARIANT}
          bash ./.evergreen/auth_oidc/k8s/setup-pod.sh
          bash ./.evergreen/auth_oidc/k8s/start-server.sh
          bash ./.evergreen/auth_oidc/k8s/run-self-test.sh
          bash ./.evergreen/auth_oidc/k8s/teardown-pod.sh
          # Generate a test results file
          cd ${PROJECT_DIRECTORY}
          make test

  "teardown assets":
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - ${DRIVERS_TOOLS}/.evergreen/teardown.sh

  "cleanup":
    - command: shell.exec
      params:
        script: |
          rm -rf ${DRIVERS_TOOLS} || true

pre:
  - func: "fetch source"
  - func: "prepare resources"

post:
  # Skip: uploading the full working directory is not needed by drivers-evergreen-tools.
  # - func: "upload working dir"
  - func: "teardown assets"
  - func: "upload logs"
  - func: "upload test results"
  - func: "cleanup"

tasks:
    # Wildcard task. Do you need to find out what tools are available and where?
    # Throw it here, and execute this task on all buildvariants
    - name: getdata
      commands:
        - command: shell.exec
          type: test
          params:
            script: |
               . ${DRIVERS_TOOLS}/.evergreen/download-mongodb.sh || true
               get_distro || true
               echo $DISTRO
               echo $MARCH
               echo $OS
               uname -a || true
               ls /etc/*release* || true
               cc --version || true
               gcc --version || true
               clang --version || true
               gcov --version || true
               lcov --version || true
               llvm-cov --version || true
               echo $PATH
               ls -la /usr/local/Cellar/llvm/*/bin/ || true
               ls -la /usr/local/Cellar/ || true
               scan-build --version || true
               genhtml --version || true
               valgrind --version || true

# Release Engineering Matrix {{{
    - name: make-release-archive
      tags: ["releng"]
      commands:
        - func: "exec script"
          vars:
            file: ".evergreen/make-release.sh"
        - func: "upload release"
        - func: "upload build"

    - name: make-docs
      tags: ["releng"]
      commands:
        - func: "exec script"
          vars:
            file: ".evergreen/make-docs.sh"
        - func: "upload docs"

    - name: release-compile
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        # Fetch the make-release-archive generated archive, rather then the git clone
        - func: "fetch build"
          vars:
            BUILD_NAME: "make-release-archive"
        - func: "exec script"
          vars:
            file: ".evergreen/compile.sh"
        - func: "upload build"

    - name: release-compile-cmake
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        # Fetch the make-release-archive generated archive, rather then the git clone
        - func: "fetch build"
          vars:
            BUILD_NAME: "make-release-archive"
        - func: "exec compile script"
          vars:
            file: ".evergreen/compile.sh"
            buildtool: "cmake"
        - func: "upload build"
# }}}


# Standard test tasks {{{

    - name: "test-8.0-standalone"
      tags: ["8.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-8.0-replica_set"
      tags: ["8.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-8.0-sharded_cluster"
      tags: ["8.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "8.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-7.0-standalone"
      tags: ["7.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-7.0-replica_set"
      tags: ["7.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-7.0-sharded_cluster"
      tags: ["7.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "7.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-6.0-standalone"
      tags: ["6.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-6.0-replica_set"
      tags: ["6.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-6.0-sharded_cluster"
      tags: ["6.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "6.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-5.0-standalone"
      tags: ["5.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-5.0-replica_set"
      tags: ["5.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-5.0-sharded_cluster"
      tags: ["5.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "5.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.4-standalone"
      tags: ["4.4", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.4-replica_set"
      tags: ["4.4", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.4-sharded_cluster"
      tags: ["4.4", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.4"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.2-standalone"
      tags: ["4.2", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.2-replica_set"
      tags: ["4.2", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.2-sharded_cluster"
      tags: ["4.2", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.2"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-4.0-standalone"
      tags: ["4.0", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-4.0-replica_set"
      tags: ["4.0", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-4.0-sharded_cluster"
      tags: ["4.0", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "4.0"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-3.6-standalone"
      tags: ["3.6", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-3.6-replica_set"
      tags: ["3.6", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-3.6-sharded_cluster"
      tags: ["3.6", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.6"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-standalone"
      tags: ["latest", "standalone"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
        - func: "run tests"

    - name: "test-latest-replica_set"
      tags: ["latest", "replica_set"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
        - func: "run tests"

    - name: "test-latest-sharded_cluster"
      tags: ["latest", "sharded_cluster"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
        - func: "run tests"

    - name: "test-latest-load_balancer"
      tags: ["latest", "load_balancer"]
      commands:
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
            LOAD_BALANCER: "true"
        - func: "run tests"

    - name: "test-serverless"
      tags: ["serverless"]
      commands:
        - func: "run tests"

    - name: "test-atlas"
      tags: ["atlas"]
      commands:
        - func: "run tests"

    - name: "test-docker"
      tags: ["latest", "docker", "pr"]
      commands:
        - func: "run docker test"

    - name: "test-docker-3.6"
      tags: ["latest", "docker", "pr"]
      commands:
      - func: "run docker test"
        vars:
          TARGET_IMAGE: ubuntu18.04
          MONGODB_VERSION: 3.6
          ARCH: amd64

    - name: "test-oidc-local"
      tags: ["latest", "oidc", "pr"]
      commands:
        - func: "run oidc local test"

    - name: "test-oidc-docker"
      tags: ["latest", "oidc", "pr"]
      commands:
        - func: "run oidc docker test"

    - name: "test-oidc-azure"
      tags: ["latest", "oidc", "pr"]
      commands:
        - func: "run oidc azure test"

    - name: "test-oidc-azure-func"
      tags: ["oidc"]
      commands:
        - func: "run oidc azure func test"

    - name: "test-oidc-gcp"
      tags: ["latest", "oidc"]
      commands:
        - func: "run oidc gcp test"

    - name: "test-oidc-k8s-atlas"
      tags: ["latest", "oidc"]
      commands:
        - func: "run oidc k8s atlas test"
          vars:
            VARIANT: eks
        - func: "run oidc k8s atlas test"
          vars:
            VARIANT: gke
        # - func: "run oidc k8s atlas test"
        #   vars:
        #     VARIANT: aks

    - name: "test-oidc-k8s-local"
      tags: ["latest", "oidc", "pr"]
      commands:
        - func: "run oidc k8s local test"
          vars:
            VARIANT: eks
        - func: "run oidc k8s local test"
          vars:
            VARIANT: gke
        # - func: "run oidc k8s local test"
        #   vars:
        #     VARIANT: aks

# }}}

task_groups:

  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: "fetch source"
      - func: "prepare resources"
      - command: subprocess.exec
        params:
          binary: "bash"
          include_expansions_in_env: ["SERVERLESS_ATLAS_PASSWORD", "SERVERLESS_ATLAS_USER"]
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: "bash"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - ".serverless"

  - name: test_atlas_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: subprocess.exec
        params:
          binary: bash
          env:
            CLUSTER_PREFIX: dbx-drivers-tools
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup.sh
      - command: expansions.update
        params:
          # Set MONGODB_URI
          file: atlas-expansion.yml
    teardown_group:
      - command: subprocess.exec
        params:
          working_dir: src
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - ".atlas"

  - name: testazureoidc_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: shell.exec
        params:
          shell: bash
          script: |
            set -o errexit
            # ensure HEAD points to current commit
            cd ${DRIVERS_TOOLS}
            git add .
            git commit -m "add files"
            export AZUREOIDC_VMNAME_PREFIX="DRIVERS_TOOLS"
            ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - test-oidc-azure

  - name: testgcpoidc_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: shell.exec
        params:
          shell: bash
          script: |
            set -o errexit
            # ensure HEAD points to current commit
            cd ${DRIVERS_TOOLS}
            git add .
            git commit -m "add files"
            export GCPOIDC_VMNAME_PREFIX="DRIVERS_TOOLS"
            ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - test-oidc-gcp

  - name: test_oidc_azure_func_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    teardown_group_can_fail_task: true
    teardown_group_timeout_secs: 1800
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure_func/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure_func/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - test-oidc-azure-func

  - name: test_oidc_k8s_atlas_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/teardown.sh
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - "test-oidc-k8s-atlas"

  - name: test_oidc_k8s_local_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    teardown_task_can_fail_task: true
    teardown_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: fetch source
      - func: prepare resources
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/k8s/setup.sh
            - local
    teardown_group:
      - func: "teardown assets"
      - func: "upload logs"
      - func: "upload test results"
      - func: "cleanup"
    tasks:
      - "test-oidc-k8s-local"

axes:
  - id: versions
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
      - id: "8.0"
        display_name: "8.0"
        variables:
           VERSION: "8.0"
      - id: "7.0"
        display_name: "7.0"
        variables:
           VERSION: "7.0"
      - id: "6.0"
        display_name: "6.0"
        variables:
           VERSION: "6.0"
      - id: "5.0"
        display_name: "5.0"
        variables:
           VERSION: "5.0"
      - id: "4.4"
        display_name: "4.4"
        variables:
           VERSION: "4.4"
      - id: "4.2"
        display_name: "4.2"
        variables:
           VERSION: "4.2"
      - id: "4.0"
        display_name: "4.0"
        variables:
           VERSION: "4.0"
      - id: "3.6"
        display_name: "3.6"
        variables:
           VERSION: "3.6"

  # OSes that support versions of MongoDB>=3.6 with SSL.
  - id: os-fully-featured
    display_name: OS
    values:

      - id: rhel8
        display_name: "RHEL 8"
        run_on: rhel87-small

      - id: macos-1100
        display_name: "macOS 11.00"
        run_on: macos-1100

      - id: windows-64-vsMulti-small
        display_name: "Windows 64"
        run_on: windows-64-vsMulti-small

  # OSes that support versions of MongoDB>=7.0 with SSL.
  - id: os-requires-70
    display_name: OS
    values:

      - id: debian12
        display_name: "Debian 12.0"
        run_on: debian12-small

      - id: ubuntu-22.04
        display_name: "Ubuntu 22.04"
        run_on: ubuntu2004-test

      - id: amazon-2023-x64
        display_name: "Amazon Linux 2023 x64"
        run_on: amazon2023.0-small

      - id: rhel9
        display_name: "RHEL 9.0 x64"
        run_on: rhel91-small

  # OSes that support versions of MongoDB>=5.0 with SSL.
  - id: os-requires-50
    display_name: OS
    values:

      - id: debian11
        display_name: "Debian 11.0"
        run_on: debian11-small

      - id: ubuntu-20.04
        display_name: "Ubuntu 20.04"
        run_on: ubuntu2004-test

      - id: ubuntu2004-arm64-small
        display_name: "Ubuntu 20.04 (ARM64)"
        run_on: ubuntu2004-arm64-small

      - id: rhel70-small
        display_name: "RHEL 7"
        run_on: rhel70-small

      - id: rhel87-power8
        display_name: "RHEL 8 (POWER8)"
        run_on: rhel81-power8-small

      - id: rhel83-zseries-small
        display_name: "RHEL8 (zSeries)"
        run_on: rhel83-zseries-small

  - id: topology
    display_name: Topology
    values:
      - id: standalone
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: replicaset
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: sharded-cluster
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: auth
    display_name: Authentication
    values:
      - id: auth
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: noauth
        display_name: NoAuth
        variables:
           AUTH: "noauth"
  - id: ssl
    display_name: SSL
    values:
      - id: ssl
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: nossl
        display_name: NoSSL
        variables:
           SSL: "nossl"
  - id: storage-engine
    display_name: Storage
    values:
      - id: mmapv1
        display_name: MMAPv1
        variables:
           STORAGE_ENGINE: "mmapv1"
      - id: wiredtiger
        display_name: WiredTiger
        variables:
           STORAGE_ENGINE: "wiredtiger"
      - id: inmemory
        display_name: InMemory
        variables:
           STORAGE_ENGINE: "inmemory"

buildvariants:

# Test packaging and other release related routines
- name: releng-release-archive-creator
  display_name: "** Release Archive Creator"
  run_on:
    - ubuntu2004-small
  tasks:
    - ".releng" # Run all tasks with the "releng" tag

# Tests relating to docker images
- name: tests-docker
  display_name: Docker
  run_on:
    - ubuntu2204-small
  tasks:
    - ".docker"  # Run all tasks with the "docker" tag

- name: tests-oidc
  display_name: OIDC
  run_on: ubuntu2204-small
  tasks:
    - "test-oidc-local"
    - "test-oidc-docker"
    - "testgcpoidc_task_group"
    - "testazureoidc_task_group"
    - "test_oidc_azure_func_task_group"
    - "test_oidc_k8s_atlas_task_group"
    - "test_oidc_k8s_local_task_group"

- matrix_name: "tests-all"
  matrix_spec: {"os-fully-featured": "*", auth: "*", ssl: "*" }
  display_name: "${os-fully-featured} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-latest-load_balancer"
     - name: "test-8.0-replica_set"
     - name: "test-8.0-sharded_cluster"
     - name: "test-8.0-standalone"
     - name: "test-7.0-replica_set"
     - name: "test-7.0-sharded_cluster"
     - name: "test-7.0-standalone"
     - name: "test-6.0-replica_set"
     - name: "test-6.0-sharded_cluster"
     - name: "test-6.0-standalone"
     - name: "test-5.0-replica_set"
     - name: "test-5.0-sharded_cluster"
     - name: "test-5.0-standalone"
     - name: "test-4.4-replica_set"
     - name: "test-4.4-sharded_cluster"
     - name: "test-4.4-standalone"
     - name: "test-4.2-replica_set"
     - name: "test-4.2-sharded_cluster"
     - name: "test-4.2-standalone"
     - name: "test-4.0-replica_set"
     - name: "test-4.0-sharded_cluster"
     - name: "test-4.0-standalone"
     - name: "test-3.6-replica_set"
     - name: "test-3.6-sharded_cluster"
     - name: "test-3.6-standalone"

- matrix_name: "tests-os-requires-50"
  matrix_spec: {"os-requires-50": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-50} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-7.0-replica_set"
     - name: "test-7.0-sharded_cluster"
     - name: "test-7.0-standalone"
     - name: "test-6.0-replica_set"
     - name: "test-6.0-sharded_cluster"
     - name: "test-6.0-standalone"
     - name: "test-5.0-replica_set"
     - name: "test-5.0-sharded_cluster"
     - name: "test-5.0-standalone"

- matrix_name: "tests-os-requires-70"
  matrix_spec: {"os-requires-70": "*", auth: "*", ssl: "*" }
  display_name: "${os-requires-70} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replica_set"
     - name: "test-latest-sharded_cluster"
     - name: "test-latest-standalone"
     - name: "test-8.0-replica_set"
     - name: "test-8.0-sharded_cluster"
     - name: "test-8.0-standalone"
     - name: "test-7.0-replica_set"
     - name: "test-7.0-sharded_cluster"
     - name: "test-7.0-standalone"

# Storage Engine Tests on Ubuntu 20.04
- matrix_name: "tests-storage-engines"
  matrix_spec: {"os-fully-featured": "rhel8", storage-engine: "*" }
  display_name: "${os-fully-featured} ${storage-engine}"
  rules:
    - if:
        os-fully-featured: "*"
        storage-engine: ["mmapv1"]
      then:
        add_tasks:
          - "test-3.6-standalone"
    - if:
        os-fully-featured: "*"
        storage-engine: ["inmemory"]
      then:
        add_tasks:
          - "test-latest-standalone"
          - "test-8.0-standalone"
          - "test-7.0-standalone"
          - "test-3.6-standalone"
    - if:
        os-fully-featured: "*"
        storage-engine: "wiredtiger"
      then:
        add_tasks:
          - "test-3.6-standalone"

- matrix_name: "atlas"
  matrix_spec:
    os-requires-50:
      - "ubuntu-20.04"
  display_name: "Atlas ${os-requires-50}"
  tasks:
    - test_atlas_task_group

- matrix_name: "serverless"
  matrix_spec:
    os-requires-50:
      - "ubuntu-20.04"
  display_name: "Serverless ${os-requires-50}"
  tasks:
    - serverless_task_group

      # Platform notes
      # i386 builds of OpenSSL or Cyrus SASL are not available
      # Ubuntu14.04 only supports 2.6+ with SSL
      # Ubuntu16.04 ppc64le is only supported by MongoDB 3.4+
      # Ubuntu16.04 aarch64 is only supported by MongoDB 3.4+
      # Ubuntu16.04 s390x is only supported by MongoDB 3.4+
      # Ubuntu16.04 (x86) only supports MongoDB 3.2+
      # Ubuntu20.04 only supports MongoDB 4.4+
      # Debian 10.0 only supports MongoDB 4.2+
      # Debian 8.1 only supports MongoDB 3.4+
      # SUSE12 s390x is only supported by MongoDB 3.4+
      # No enterprise build for Archlinux, SSL not available
      # RHEL 7 only supports 2.6+
      # RHEL 7.1 ppc64le is only supported by MongoDB 3.2+
      # RHEL 7.2 s390x is only supported by MongoDB 3.4+
      # Solaris MongoDB SSL builds are not available
      # Darwin MongoDB SSL builds are not available for 2.4 and 2.6
      # Windows does not support MongoDB 2.4 with SSL
      # Debian 7.1 does not support MongoDB 2.4
      # SUSE12 x86_64 is only supported by MongoDB 3.2+
      # vim: set et sw=2 ts=2 :
